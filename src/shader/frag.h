/*
 * Automatically generated by script/glsl2header.py
 */
/*
 * Copyright (C) 2023, unclearness
 * All rights reserved.
 */

#pragma once

#include <string>

namespace ugu {

static inline std::string frag_deferred_code =
    "#version 330 core\n"
    "out vec4 FragColor;\n"
    "\n"
    "in vec2 TexCoords;\n"
    "\n"
    "uniform sampler2D gPosition;\n"
    "uniform sampler2D gNormal;\n"
    "uniform sampler2D gAlbedoSpec;\n"
    "\n"
    "struct Light {\n"
    "  vec3 Position;\n"
    "  vec3 Color;\n"
    "\n"
    "  float Linear;\n"
    "  float Quadratic;\n"
    "};\n"
    "const int NR_LIGHTS = 32;\n"
    "uniform Light lights[NR_LIGHTS];\n"
    "uniform vec3 viewPos;\n"
    "\n"
    "void main() {\n"
    "  // retrieve data from gbuffer\n"
    "  vec3 FragPos = texture(gPosition, TexCoords).rgb;\n"
    "  vec3 Normal = texture(gNormal, TexCoords).rgb;\n"
    "  vec3 Diffuse = texture(gAlbedoSpec, TexCoords).rgb;\n"
    "  float Specular = texture(gAlbedoSpec, TexCoords).a;\n"
    "\n"
    "  // then calculate lighting as usual\n"
    "  vec3 lighting = Diffuse * 0.1;  // hard-coded ambient component\n"
    "  vec3 viewDir = normalize(viewPos - FragPos);\n"
    "  for (int i = 0; i < NR_LIGHTS; ++i) {\n"
    "    // diffuse\n"
    "    vec3 lightDir = normalize(lights[i].Position - FragPos);\n"
    "    vec3 diffuse = max(dot(Normal, lightDir), 0.0) * Diffuse * "
    "lights[i].Color;\n"
    "    // specular\n"
    "    vec3 halfwayDir = normalize(lightDir + viewDir);\n"
    "    float spec = pow(max(dot(Normal, halfwayDir), 0.0), 16.0);\n"
    "    vec3 specular = lights[i].Color * spec * Specular;\n"
    "    // attenuation\n"
    "    float distance = length(lights[i].Position - FragPos);\n"
    "    float attenuation = 1.0 / (1.0 + lights[i].Linear * distance +\n"
    "                               lights[i].Quadratic * distance * "
    "distance);\n"
    "    diffuse *= attenuation;\n"
    "    specular *= attenuation;\n"
    "    lighting += diffuse + specular;\n"
    "  }\n"
    "  FragColor = vec4(lighting, 1.0);\n"
    "}\n";
static inline std::string frag_gbuf_code =
    "#version 330 core\n"
    "layout(location = 0) out vec3 gPosition;\n"
    "layout(location = 1) out vec3 gNormal;\n"
    "layout(location = 2) out vec4 gAlbedoSpec;\n"
    "\n"
    "in vec2 TexCoords;\n"
    "in vec3 FragPos;\n"
    "in vec3 Normal;\n"
    "\n"
    "uniform sampler2D texture_diffuse1;\n"
    "uniform sampler2D texture_specular1;\n"
    "\n"
    "void main() {\n"
    "  // store the fragment position vector in the first gbuffer texture\n"
    "  gPosition = FragPos;\n"
    "  // also store the per-fragment normals into the gbuffer\n"
    "  gNormal = normalize(Normal);\n"
    "  // and the diffuse per-fragment color\n"
    "  gAlbedoSpec.rgb = texture(texture_diffuse1, TexCoords).rgb;\n"
    "  // store specular intensity in gAlbedoSpec's alpha component\n"
    "  gAlbedoSpec.a = texture(texture_specular1, TexCoords).r;\n"
    "}\n";
}  // namespace ugu
